/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import DataHandling.dataReadIn;
import Main.Clinic;
import UserObj.user;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.ArrayList;

/**
 *
 * @author Block
 */
public class secretarydeletepatientaccount extends javax.swing.JFrame {

    /**
     * Creates new form secretarydeletepatientaccount
     */
    public secretarydeletepatientaccount() {
        initComponents();
    }
    public static class ticker {
        static int nextRequest = 0 ;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        loadFirstPatient = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("approve deletion ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("next patient");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("username");

        jLabel2.setText("password");

        jLabel3.setText("secretary patient accoutn deletion ");

        loadFirstPatient.setText("load first patient");
        loadFirstPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFirstPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(jTextField2))
                        .addGap(18, 18, 18)
                        .addComponent(loadFirstPatient))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(46, 46, 46)
                                .addComponent(jButton3)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(loadFirstPatient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       ArrayList<user> currentPatients1 = new ArrayList<user>();
        dataReadIn data = new dataReadIn();
        try{
        data.readCurrentPatients(currentPatients1);
        }
        catch(Exception e){
                e.printStackTrace();
            }
        Object[] currentPatients = currentPatients1.toArray();
        int length = currentPatients.length;
        String[] username1 = new String[length], password1 = new String[length];
            for (int i = 0; i < length; i++) {
                String name = ((UserObj.patientObj)currentPatients[i]).getUserID();
                String pass = ((UserObj.patientObj)currentPatients[i]).getPassword();
                username1[i] = name;
                password1[i] = pass;
            }
        int a = 0;
        boolean userisTrue;
        boolean passisTrue;
        
        while( a < length){
            if(username1[a].equals(jTextField1.getText())){
                userisTrue = true;
            }
            else{
                userisTrue = false;
            }
            if(password1[a].equals(jTextField2.getText())){
                passisTrue = true;
            }
            else{
                passisTrue = false;
            }
            if(Boolean.TRUE.equals(passisTrue) && Boolean.TRUE.equals(userisTrue)){
                data.removePatientToArray(currentPatients1.get(a), currentPatients1);
                try{
                   BufferedWriter clear = new BufferedWriter(new FileWriter("./checks\\approvedPatients.txt", false));
                    clear.newLine();
                }
                catch(Exception e){
                e.printStackTrace();
                }
                if(length != 1){
                    length = length - 1;
                }
                    
                    for (int l = 0; l < length; l++) {
                        currentPatients = currentPatients1.toArray();
                        String userId = ((UserObj.patientObj)currentPatients[l]).getUserID();
                        String password = ((UserObj.patientObj)currentPatients[l]).getPassword();
                        String firstName = ((UserObj.patientObj)currentPatients[l]).getFirstname();
                        String lastName = ((UserObj.patientObj)currentPatients[l]).getLastname();
                        String mobilePhoneNumber = ((UserObj.patientObj)currentPatients[l]).getMobilePhoneNumber();
                        String workPhoneNumber = ((UserObj.patientObj)currentPatients[l]).getWorkPhoneNumber();
                        String addressLine = ((UserObj.patientObj)currentPatients[l]).getAddressLine();
                        String city = ((UserObj.patientObj)currentPatients[l]).getCity();
                        String dateOfBirth = ((UserObj.patientObj)currentPatients[l]).getDateOfBirth();
                        String age = ((UserObj.patientObj)currentPatients[l]).getAge();
                        String gender = ((UserObj.patientObj)currentPatients[l]).getGender();
                        String PatientNumber = ((UserObj.patientObj)currentPatients[l]).getPatientNumber();
                        try{
                            BufferedWriter out = new BufferedWriter(new FileWriter("./checks\\approvedPatients.txt", true));
                            out.write(userId);
                            out.newLine();
                            out.write(password);
                            out.newLine();
                            out.write(firstName);
                            out.newLine();
                            out.write(lastName);
                            out.newLine();
                            out.write(mobilePhoneNumber);
                            out.newLine();
                            out.write(workPhoneNumber);
                            out.newLine();
                            out.write(addressLine);
                            out.newLine();
                            out.write(city);
                            out.newLine();
                            out.write(dateOfBirth);
                            out.newLine();
                            out.write(age);
                            out.newLine();
                            out.write(gender);
                            out.newLine();
                            out.write(PatientNumber);
                            out.newLine();
                            out.close();
                            
                    }
                    catch(Exception e){
                        e.printStackTrace();
                    }
                    
                }
            }
            a = a + 1;
            
            Clinic.infoBox("Account has been deleted ", "notification ");
            
            
        
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void loadFirstPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFirstPatientActionPerformed
        ArrayList<user> patientRequest = new ArrayList<user>();
        
        dataReadIn data = new dataReadIn();
        try{
            data.readAccountDeletionRequests(patientRequest);
        }
        catch(Exception e){
            e.printStackTrace();
        }
        // runs data read in functrion for reading data from pateint account request 
        
        Object[] displayPatient = patientRequest.toArray();
        int length = displayPatient.length;
       
       
        jTextField1.setText(((UserObj.patientObj)displayPatient[0]).getUserID());
        jTextField2.setText(((UserObj.patientObj)displayPatient[0]).getPassword());
        
        
        
        
    }//GEN-LAST:event_loadFirstPatientActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       ticker.nextRequest = ticker.nextRequest + 1;
         ArrayList<user> patientRequest = new ArrayList<user>();
        
        dataReadIn data = new dataReadIn();
        try{
            data.readAccountDeletionRequests(patientRequest);
        }
        catch(Exception e){
            e.printStackTrace();
        }
        // runs data read in functrion for reading data from pateint account request 
        
        Object[] displayPatient = patientRequest.toArray();
        int length = displayPatient.length;
       
       
        jTextField1.setText(((UserObj.patientObj)displayPatient[ticker.nextRequest]).getUserID());
        jTextField2.setText(((UserObj.patientObj)displayPatient[ticker.nextRequest]).getPassword());
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton loadFirstPatient;
    // End of variables declaration//GEN-END:variables
}
