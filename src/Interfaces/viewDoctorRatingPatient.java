/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import DataHandling.dataReadIn;
import Main.Clinic;
import java.util.ArrayList;
import UserObj.doctorObj;
import UserObj.user;
import java.io.BufferedWriter;
import java.io.FileWriter;
import UserObj.doctorObj;

/**
 *
 * @author Block
 */
public class viewDoctorRatingPatient extends javax.swing.JFrame {

    /**
     * Creates new form viewDoctorRatingPatient
     */
    public viewDoctorRatingPatient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        doctoridIn = new javax.swing.JTextField();
        doctornameIn = new javax.swing.JTextField();
        genderIn = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        commentIn = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ratingsIn = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        doctorRatingInFromUser = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        commentsAdd = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("view doctor ratings ");

        jLabel2.setText("doctor id  ");

        jLabel3.setText("doctor name");

        jLabel4.setText("gender");

        jLabel5.setText("ratings");

        jLabel6.setText("comments");

        commentIn.setColumns(20);
        commentIn.setRows(5);
        jScrollPane1.setViewportView(commentIn);

        ratingsIn.setColumns(20);
        ratingsIn.setRows(5);
        jScrollPane2.setViewportView(ratingsIn);

        jLabel7.setText("please enter the doctors name");

        jButton3.setText("search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel8.setText("please enter your rating here of doctor selected ");

        jLabel9.setText("1 to 10 ");

        jLabel10.setText("please enter a comment for the doctor ");

        submit.setText("submit ");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(93, 93, 93))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(genderIn, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(539, 539, 539))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addGap(105, 105, 105))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(doctorRatingInFromUser, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(70, 70, 70))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(commentsAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(11, 11, 11)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jLabel10)
                                        .addGap(25, 25, 25))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(submit))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(doctoridIn, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doctornameIn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jLabel7))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(doctornameIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(doctoridIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(genderIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(95, 95, 95))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)))
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel10)
                                .addGap(13, 13, 13)
                                .addComponent(commentsAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doctorRatingInFromUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(submit)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        patientLogedInScreen open = new patientLogedInScreen();
        open.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       ArrayList<user> doctors = new ArrayList<user>();
        dataReadIn data = new dataReadIn();
        try{
        data.readCurrentDoctors(doctors);
        }
        catch(Exception e){
                e.printStackTrace();
            }
        Object[] adoctors = doctors.toArray();
        
        int length = adoctors.length;
        String[] userName = new String[length];
        for (int i = 0; i < length; i++) {
            String name = ((UserObj.doctorObj)adoctors[i]).getFirstname();
            userName[i] = name;
        }
     
            
      
        int b = 0;
        boolean userCheck;
        
        
        while( b < length){
            if(userName[b].equals(doctornameIn.getText())){
                userCheck = true;
            }
            else{
                userCheck = false;
            }
            
        
            
            if( (Boolean.TRUE.equals(userCheck) )){
                
                    String doctorId = ((UserObj.doctorObj)adoctors[b]).getUserId();
                    String gender = ((UserObj.doctorObj)adoctors[b]).getGender();
                    String ratings = ((UserObj.doctorObj)adoctors[b]).getRatings();
                    String comments = ((UserObj.doctorObj)adoctors[b]).getComments();

                    doctoridIn.setText(doctorId);
                    genderIn.setText(gender);
                    ratingsIn.append(ratings );
                    commentIn.append(comments);
          
            }
            b = b + 1;
        }
         Clinic.infoBox("doctor loaded ", "notification ");
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        ArrayList<user> doctors = new ArrayList<user>();
        dataReadIn data = new dataReadIn();
        try{
        data.readCurrentDoctors(doctors);
        }
        catch(Exception e){
                e.printStackTrace();
            }
        Object[] currentdoctors = doctors.toArray();
        
        int length = currentdoctors.length;
        String[] userName = new String[length];
        for (int i = 0; i < length; i++) {
            String name = ((UserObj.doctorObj)currentdoctors[i]).getFirstname();
            userName[i] = name;
        }
        int a = 0;
        boolean userisTrue;
        String ratingsAdd = " " + doctorRatingInFromUser.getText();
        String commentsAdds = commentsAdd.getText()+ ".";
        String comboRatings; 
        String comboComments;
        
               
        
        while( a < length){
            if(userName[a].equals(doctornameIn.getText())){
                userisTrue = true;
            }
            else{
                userisTrue = false;
            }
            
            if(Boolean.TRUE.equals(userisTrue)){
                comboRatings = ((UserObj.doctorObj)currentdoctors[a]).getRatings() + ratingsAdd;
                comboComments = ((UserObj.doctorObj)currentdoctors[a]).getComments() + commentsAdds;
                
                
               
                
                ((UserObj.doctorObj)currentdoctors[a]).setRatings(comboRatings);
                ((UserObj.doctorObj)currentdoctors[a]).setComments(comboComments);
                
                
                
                
                
                try{
                   BufferedWriter clear = new BufferedWriter(new FileWriter("./checks\\approvedDoctors.txt", false));
                    clear.newLine();
                }
                catch(Exception e){
                e.printStackTrace();
                }
                //if(length != 1){
                    //length = length - 1;
                //}
                    
                    for (int l = 0; l < length; l++) {
                        currentdoctors = doctors.toArray();
                        String userId = ((UserObj.doctorObj)currentdoctors[l]).getUserId();
                        String password = ((UserObj.doctorObj)currentdoctors[l]).getPassword();
                        String firstName = ((UserObj.doctorObj)currentdoctors[l]).getFirstname();
                        String lastName = ((UserObj.doctorObj)currentdoctors[l]).getLastname();
                        String mobilePhoneNumber = ((UserObj.doctorObj)currentdoctors[l]).getMobileNumber();
                        String addressLine = ((UserObj.doctorObj)currentdoctors[l]).getAddressline();
                        String age = ((UserObj.doctorObj)currentdoctors[l]).getAge();
                        String gender = ((UserObj.doctorObj)currentdoctors[l]).getGender();
                        String ratings = ((UserObj.doctorObj)currentdoctors[l]).getRatings();
                        String comments = ((UserObj.doctorObj)currentdoctors[l]).getComments();
                        String adminComments = ((UserObj.doctorObj)currentdoctors[l]).getAdminFeedback();
                        
                        
                        try{
                            BufferedWriter out = new BufferedWriter(new FileWriter("./checks\\approvedDoctors.txt", true));
                            out.newLine();
                            out.write(userId);
                            out.newLine();
                            out.write(password);
                            out.newLine();
                            out.write(firstName);
                            out.newLine();
                            out.write(lastName);
                            out.newLine();
                            out.write(mobilePhoneNumber);
                            out.newLine();
                            out.write(addressLine);
                            out.newLine();
                            out.write(age);
                            out.newLine();
                            out.write(gender);
                            out.newLine();
                            out.write(ratings);
                            out.newLine();
                            out.write(comments);
                            out.newLine();
                            out.write(adminComments) ;
                            out.newLine();
                            out.close();
                            
                    }
                    catch(Exception e){
                        e.printStackTrace();
                    }
                    
                }   
            }
            a = a + 1;
            
            
            
            
        
        }
        
        
        Clinic.infoBox("ratings and comments submitted ", "notification ");  
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_submitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewDoctorRatingPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewDoctorRatingPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewDoctorRatingPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewDoctorRatingPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewDoctorRatingPatient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea commentIn;
    private javax.swing.JTextField commentsAdd;
    private javax.swing.JTextField doctorRatingInFromUser;
    private javax.swing.JTextField doctoridIn;
    private javax.swing.JTextField doctornameIn;
    private javax.swing.JTextField genderIn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea ratingsIn;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
